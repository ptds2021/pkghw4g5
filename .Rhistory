roxygen2::roxygenise()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
init_site(man/figures/logo.png, geometry = "240x278", retina = TRUE)
use_logo(man/figures/logo.png, geometry = "240x278", retina = TRUE)
build_favicons(pkg = "pkghw4g5", overwrite = FALSE)
use_logo(man/figures/logo.png, geometry = "240x278", retina = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
git config --global http.sslVerify false
git config --global
git config http.sslVerify false
git config --global http.sslVerify false
git config --global http.sslVerify false
usethis::use_pkgdown()
packageVersion("blogdown")
blogdown::hugo_available()
usethis::use_pkgdown()
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="theme-color" content="#ffffff">
usethis::use_pkgdown()
install.packages("devtools"); library(devtools)
devtools::install_github("amirmasoudabdol/preferably")
install.packages("devtools")
devtools::install_github("amirmasoudabdol/preferably")
13
deploy_on_branch()
build_site()
remotes::install_github("amirmasoudabdol/preferably", type = "source")
?build_articles
devtools::load_all(".")
usethis::use_github_action("pkgdown")
pkgdown::build_site()
.Last.error.trace
usethis::use_vignette("my-vignette")
library(shiny)
library(shiny)
runApp("my_app")
runApp(shiny-examples)
runApp("inst")
runApp("shiny-examples")
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Area Estimation"),
sidebarLayout(
sidebarPanel(
numericInput(inputId = "seed", label = "Select Seed Value", value = 1),
sliderInput(inputId = "B", label = "Select Number of Simulations", min = 0, max = 1000000, value = 5000)
),
mainPanel(
plotOutput(outputId = "plot"),
textOutput(outputId = "time"),
textOutput(outputId = "area")
)
)
))
server <- shinyServer(function(input, output) {
simulate <- reactive({
estimate_area(input$B, input$seed)
})
output$plot <- renderPlot({
plot_area(simulate())
})
output$time <- renderText({
system.time(simulate())
})
output$area <- renderText({
simulate()$estimated_area
})
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("Area Estimation"),
sidebarLayout(
sidebarPanel(
numericInput(inputId = "seed", label = "Select Seed Value", value = 1),
sliderInput(inputId = "B", label = "Select Number of Simulations", min = 0, max = 1000000, value = 5000)
),
mainPanel(
plotOutput(outputId = "plot"),
textOutput(outputId = "time"),
textOutput(outputId = "area")
)
)
))
server <- shinyServer(function(input, output) {
simulate <- reactive({
estimate_area(input$B, input$seed)
})
output$plot <- renderPlot({
plot_area(simulate())
})
output$time <- renderText({
system.time(simulate())
})
output$area <- renderText({
simulate()$estimated_area
})
})
shinyApp(ui = ui, server = server)
